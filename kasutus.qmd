# Põhikasutus {#sec-kasutus}

Käesolevas peatükis tutvume lühidalt R keele kasutamisega.

## Käsurida

Käsureal (*command line*) esitatud käsu alusel teeb R rakendus vastavalt R keele loogikale arvutused ja esitab vastuse. Nii saab käsurida kasutada ka lihtsalt kalkulaatorina ja sealjuures saab korraga teha ka mitu tehet.

```{r}
13 + 8 # Liitmine
8 - 5 # Lahutamine 
21 / 3 # Jagamine 
5 * 3 # Korrutamine 
2^3 # Astendamine 
9^(1/2) # Ruutjuur
13 + (8 - 5) * 9^(1/2)
```

R keele võimekus avaldub aga siis, kui kasutame käske salvestamaks väärtused objektidesse ja rakendamaks neil erinevaid funktsioone.=

## Objektid ja funktsioonid

> To understand computations in R, two slogans are helpful:  
> 	Everything that exists is an object.  
> 	Everything that happens is a function call.  
> - John Chambers

Andmete töötlemiseks on vaja need kuidagi salvestada. Väärtusi saab R keeles salvestada objektidena. Sealjuures väärtused, mis ei ole arvud, tuleb ümbritseda jutumärkidega.

```{r}
# Objekti võib salvestada arve...
kama <- 2
kama
# ...aga ka sõnu või lauseid.
pesa <- 'muna'
pesa
# Trükitav nö nool ei tohi sisaldada tühikuid, 
# sest vastasel juhul käsitletakse käsku võrdlusena.
kama < - 2
```

Objekte võib nimetada kuidas iganes^[Objektidele nime valimine võtab sageli rohkem aega kui peaks: "There are only two hard things in Computer Science: cache invalidation and naming things."], aga nimetused peavad algama tähega ega tohi sisaldada teatud kirjavahemärke ega tühikuid.

Väärtuste klasse on R keeles väga palju, aga olulisimaks võib pidada nendest kolme:

- üksik väärtus on element,  
- mitu väärtust on vektor, 
- tabelina vormistatud väärtused on andmetabel (*data frame*).

Väärtuse klass sõltub sellest, mis kujul me andmed sisestame.

```{r}
# Element
kaks <- 3
kaks
# Vektor
nimed <- c('Alar', 'Kaja', 'Jüri')
nimed
# Andmetabel
õpilased <- data.frame(nimi = nimed, 
                       hinne = c(5,4,2))
õpilased
```

Nagu näha, siis rohkem kui ühe elemendi esitamiseks peame kasutama vastavat funktsiooni.

Samuti ilmneb, et funktsiooni nimetuse järele sulgudesse tuleb sisestada funktsiooni argumendid. Esimene argument on enamasti objekt ja järgnevad argumendid täpsustused.

```{r}
Fibonacci <- c(1,NA,2,3,NA)
# Kuna vektor sisaldab teadmata väärtusi, 
# siis ei väljasta funktsioon vektori summat.
sum(Fibonacci)
# Saame täpsustada, et soovime summa arvutada ilma puuduvate väärtusteta.
sum(Fibonacci, na.rm = TRUE)
```

Iga funktsiooni kõikide argumentide teada saamiseks saab kuvada vastava funktsiooni abilehe. Selleks tuleb sisestada käsk, milles funktsiooni nimetusele eelneb küsimärk.

```{r}
?sum
```

:::{.callout-note}
R keele kasutamine on põhimõtteliselt väga lihtne: see on lihtsalt funktsioonide rakendamine objektidel. Kogu keerukus seisneb objektide ja funktsioonide tundmises ning nende omavahel kombineerimises.
:::

## Laiendused

R keele paigaldamisel tuleb kaasa palju funktsioone, mis võimaldavad rakendada põhilisi andmetöötluse ja statistilise analüüsi protseduure. Võimaluste lisamiseks on aga paljud R keele kasutajad kirjutanud ise funktsioone ja koondanud need laiendustesse või pakkidesse (*packages*), mis on saadaval ka teistele kasutajatele^[Ametlikult tunnustatud R keele laiendused on [CRAN](https://cran.r-project.org/) hoidlas.]. Selleks, et neid laiendusi kasutada tuleb need esmalt arvutisse paigaldada ja seejärel töölauale laadida.

```{r}
#| eval: false
# Laadime laienduse alla ja paigaldame arvutisse.
install.packages('tidyverse')
# Laienduse kasutamiseks tuleb see esmalt R töölauale laadida.
library('tidyverse')
```

```{r}
#| include: false
library('tidyverse')
```

Eelnevate käskudega paigaldatud ja laaditud laiendus `tidyverse` sisaldab tegelikult palju teisi laiendusi, mille funktsioonid lihtsustavad käskude kirjutamist R keeles. Edaspidi kasutame paljusid antud laienduses sisalduvaid funktsioone.

## Sisestamine

Mõistagi ei pea andmed R töölauale sisestama üksikute väärtuste kaupa nii nagu eelnevas näites. Lisatavates lainedustes olevate funktsioonide abil on R võimeline lugema andmeid peaaegu misiganes vormingus. Siiski on soovitatav kasutada R keelega kaasas olevaid funktsioone, mis tunnevad eelkõige lihttekstina salvestatud andmeid. Üheks selliseks andmevorminguks on CSV (*comma separated value*), mis on lihtsalt teksti sisaldav fail, milles väärtused on eraldatud komadega.

CSV vormingus andmete R töölauale laadimiseks saab kasutada funktsiooni `read.csv()`, mille argumendiks on andmefaili koht failisüsteemis. Kui andmete esimene rida sisaldab veergude nimetusi, siis tuleb seda argumendiga täpsustada argumendiga `header = TRUE`.

```{r}
#| include: false
if (format(file.info('andmed/thi.csv')$mtime, '%Y') < format(Sys.Date(), '%Y')) {
  library('pxweb')
  päring <- pxweb_query('
{
  "query": [
    {
      "code": "Kaubagrupp",
      "selection": {
        "filter": "item",
        "values": [
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "10",
          "11",
          "12",
          "13"
        ]
      }
    }
  ],
  "response": {
    "format": "json-stat2"
  }
}
')
  thi <- pxweb_get_data('https://andmed.stat.ee/api/v1/et/stat/IA02', query = päring)
  names(thi)[4] <- 'Tarbijahinnaindeks'
  thi <- thi[complete.cases(thi), ]
  write.csv(thi, 'andmed/thi.csv', row.names = F)
} else thi <- read.csv('andmed/thi.csv')
```

```{r}
#| eval: false
# Salvestame objekti "thi" töölaua kaustas oleva faili "thi.csv"
# Need on tarbijahinnaindeksi (THI) andmed Statistikaameti tabeli IA02 alusel
thi <- read.csv('C:/Users/kasutajanimi/Desktop/thi.csv', header = TRUE)
```

::: {.callout-caution}
Kui salvestada tabel CSV vormingus Microsoft Exceli abil, siis on väärtuse eraldajateks hoopis semikoolonid. Sellisel juhul loeb funktsioon `read.csv()` andmeid valesti. Lahenduseks on kasutada funktsiooni `read.csv2()` , mis arvestab väärtuste eraldajatena semikoolonit ja komakohtade eraldajatena komasid.

CSV aluseks on USA standard, milles arvude komakohad eraldatakse punktiga. Kuna Euroopas eraldatakse arvudes komakohad komaga, siis ei saa komasid kasutada väärtuse eraldamiseks ja Excel eraldab väärtused hoopis semikoolonitega.
:::

Faililaiendiga `.xlsx` nö tabelarvutuse vihikutes ei pruugi andmed olla vormistatud korrektse andmetabelina ja võivad sisaldada tabelist väljaspool olevaid väärtusi. Nt tühjade ridade või veergudega tabelid ilmuvad statistikarakendustesse või R töölauale laadides sageli vigaselt. Selliste vigade kõrvaldamine on enamasti keerulisem võrreldes CSV vormingu kasutamisega. Sellepärast on ka soovitatav kasutada CSV vormingut. Kui on siiski vajadus laadida töölauale `.xlsx` vormingus olevad andmed, siis selleks saab kasutada funktsiooni `read_excel()`.

```{r}
#| eval: false
thi <- read_excel('C:/Users/kasutajanimi/Desktop/thi.xlsx')
```

::: {.callout-tip}
Kui andmed on mingi muu faililaiendiga (nt `.xlsx`), siis on soovitatav need esmalt CSVna salvestada ja alles seejärel R töölauale laadida. 
:::

Kui soovime kõik loetavad ja salvestatavad failid koondada ühte kausta, siis võime määrata selle vaikimisi kaustaks. Sel juhul ei pea me faili täielikku asukohta sisestama, vaid piisab faili nimest ja -laiendist.

```{r}
#| eval: false
setwd('C:/Users/kasutajanimi/Desktop/')
thi <- read.csv('thi.csv', header = TRUE)
```

::: {.callout-warning}
R keel tunnistab failide asukoha kirjes kaustade eraldajatena paremale kaldu olevaid kaldkriipse (`/`). See vastab MacOS ja Linuxi failisüsteemile. Microsoft Windows kasutab aga vasakule kaldu olevaid kaldkriipse (`\`). Seega tuleb Windowsi süsteemis faili asukoha kopeerimisel R keelde kaldkriipsud vastavalt ära muuta.
:::

## Ülevaade objektist

Andmete sisestamisel on hea mõte veenduda, et andmed laaditi töölauale õigesti. Selleks saame kasutada funktsiooni `head()`, mis kuvab esimesed viis rida. 

```{r}
head(thi)
```

Kõikidest andmetabeli tunnustest saame ülevaate funktsiooni `str()` abil. Samuti kuvab funktsioon vaatluste ja tunnuste arvu.

```{r}
str(thi)
```

## Valimine

Tabelarvutuses saab vajalike lahtrite valimiseks kasutada kursorit, aga käsureal ei saa valikud vormistada muul viisil kui käsuna. Selleks kõige lihtsam viis on sisestada soovitud väärtuste asukoht objekti järel nurksulgudesse. 

```{r}
# Vektori kolmas väärtus
Fibonacci
Fibonacci[3]
# Andmetabel esimese rea ja neljanda veeru väärtus
thi[1, 4]
# Andmetabeli veeru Tarbijahinnaindeks esimene rida
thi$Tarbijahinnaindeks[1]
# Andmetabel esimese rea ja kõikide veergude väärtused
thi[1, ]
```

Enamasti ei soovi me aga vajalikke väärtusi valida mitte nende asukoha alusel, vaid  mingi teise tunnuse väärtuse alusel. Sellisel juhul saame esitada valiku tõeväärtusena.

```{r}
# Kolmas ja neljas väärtus asukoha alusel
Fibonacci[c(3,4)]
# Kolmas ja neljas väärtus tõeväärtusena
Fibonacci[c(FALSE,FALSE,TRUE,TRUE,FALSE)]
```

Tõeväärtused võivad sisaldada ka mitut tingimust.

```{r}
# Read, mille korral THI oli vähem kui 100 ja kaubagrupp ei olnud side
thi[thi$Tarbijahinnaindeks < 100 & thi$Kaubagrupp != 'Side', ]
# Aasta ja THI väärtused jaanuarikuus kõikide kaupade arvestuses
thi[thi$Kuu == 'Jaanuar' & thi$Kaubagrupp == 'Kokku', 
    c('Aasta', 'Tarbijahinnaindeks')]
```

::: {.callout-note}
Tõeväärtuse abil saame objektist valida väärtused mingi teise objekti väärtuse alusel. Selle teise objekti väärtused tuleb määrata võrdlusoperaatori abil. Mitme võrdluse korral peame võrdlused eraldama loogikaoperaatoritega.
:::

Võrdlusoperaatorite (*relational operators*) abil saame tekitada tõeväärtuse, mille alusel saame valida soovitud väärtuse mingi muu objekti väärtuse järgi. Võrdlusoperaatoreid on kuus:

- võrdub `==` (kaks võrdusmärki), 
- ei võrdu `!=`, 
- suurem kui `>`, 
- väiksem kui `<`, 
- suurem või võrdne kui `>=`, 
- väiksem või võrdne kui `<=`.

Loogikaoperaatorite (*logical operators*) abil saame ühendada mitu võrdlust. Lihtsamaid loogikaoperaatoreid on kolm (`!`, `&`, `|`) ja neid saab kasutada võrdluste liitmisel tõeväärtuste moodustamiseks nt järgnevalt:

- mitte x (`!x`)
- x ja y (`x & y`), 
- x või y (`x | y`), 
- x ja mitte y (`x & !y`).

### Valimine andmetabelist

Eelneva kirjelduse alusel võib väärtuste valimine tunduda keeruline ja tülikas. Seda saab teatud mõttes lihtsustada, kui kasutame varem paigaldatud laienduses sisalduvaid funktsioone. Ridade valimiseks on funktsioon `filter()` ja veergude valimiseks `select()`. 

```{r}
# THI aastal 2020
filter(thi, Aasta == 2020 & Kaubagrupp == 'Kokku')
# THI veerg andmetabeli esimesel viiel real
select(head(thi), Tarbijahinnaindeks)
```

Tehtud valiku salvestamiseks tuleb saadud tulemus lihtsalt sisestusoperaatori abil objekti salvestada.

```{r}
# Jätame alles vaid read alates aastast 2020
thi <- filter(thi, Aasta >= 2020)
```

## Kokkuvõtted

Väärtuste kokku võtvaks kirjeldamiseks on väga palju viise ja neile vastavaid funktsioone, aga alustuseks vaatame liitmist, keskmist ja äärmuslikke väärtusi.

```{r}
Fibonacci <- c(0,1,1,2,3,5,8,13,21,34,55,89)
sum(Fibonacci) # Summa
mean(Fibonacci) # Aritmeetiline keskmine
median(Fibonacci) # Mediaan
min(Fibonacci) # Väikseim väärtus
max(Fibonacci) # Suurim väärtus
```

## Torutamine

Koodi kirjutamise ja eriti hiljem lugemise lihtsustamiseks saab kasutada paljudes programmeerimiskeeltes kasutusel olevat toru (*pipe*). Torude abil saame ühe funktsiooni tulemuse suunata järgmisesse funktsiooni, mis muudab koodi selgemaks. Kokku on kolm viisi, kuidas funktsioone omavahel ühendada.

```{r}
# Oletame, et soovime uurida eluaseme THI muutust 2022. aastal
## Iga iga funktsiooni tulemuse saab järjest objekti salvestada
eluase <- filter(thi, Kaubagrupp == 'Eluase')
eluase <- filter(eluase, Aasta == 2022)
select(eluase, Kuu, Tarbijahinnaindeks)
## Nö pesastamist kasutades tõstame funktsiooni tulemuse järgmise funktsiooni sisse
select(filter(filter(thi, Kaubagrupp == 'Eluase'), Aasta == 2022), Kuu, Tarbijahinnaindeks)
## Torutamise käigus saadame funktsiooni tulemuse järgmisesse funktsiooni
thi %>% 
  filter(Kaubagrupp == 'Eluase') %>% 
  filter(Aasta == 2022) %>% 
  select(Kuu, Tarbijahinnaindeks)
```

Nagu näha, siis arvestab torule järgnev funktsioon kõige esimese argumendina eelneva funktsiooni tulemust.

Ühendades nüüd oskused andmetabelist andmeid valida ja kokku võtta saame juba hakata vastama mitmesugustele küsimustele.

```{r}
# Millal ja mis kaubagrupis oli THI pärast 2020. aastat kõige kõrgem?
filter(thi, Aasta >= 2021) %>% 
  filter(Tarbijahinnaindeks == max(Tarbijahinnaindeks))
# Mis juhtudel on THI suurenenud 1997. aastaga võrreldes vähemalt 4 korda?
thi %>% filter(Tarbijahinnaindeks > 400) 
```

## Salvestamine

Nii nagu andmete R keskkonda lugemise korral on ka nende salvestamiseks soovitatav kasutada CSV vormingut. Selleks on funktsioon `write.csv()`, aga kui soovime hiljem selle faili avada Excelis, siis tuleb kasutada funktsiooni `write.csv2()`.

```{r}
#| eval: false
write.csv(thi, 'andmed/thi.csv')
```

## Korratav analüüs

Kuna R keele kasutamisel teeme kõik tehted käskude alusel, siis saame kõik käsud salvestada käsulehele (*script*). Käsulehe kasutamine annab palju võimalusi: 

- kui soovime sisestatud käsu tühistada, siis saame jooksutada uuesti eelnevad käsud;
- kui avastame hiljem, et tegime vea või soovime midagi tehtud analüüsis muuta, siis piisab käsulehel muudatuse tegemisest ja käsulehe uuesti jooksutamisest; 
- saame hiljem üle vaadata, kuidas täpselt andmetöötluses mingi tulemuseni jõudsime; 
- teised saavad veenduda meie tulemuste õigsuses, rakendades meie koosatud käsulehte mingitel andmetel.

::: {.callout-note}
R keelt kasutades ei ole võimalik käske tühistada või tagasi võtta (*undo*). Kõik muudatused andmetes on lõplikud. Eelneva analüüsi sammu juurde tagasi minemiseks peame andmed uuesti R töölauale sisestama. 
:::

Käsulehel on andmetöötluse tegevused enamasti teatud järjekorras:

1. töökausta määramine, 
2. laienduste laadimine, 
3. andmete sisestamine, 
4. andmetöötlus, 
5. tulemuse salvestamine andmefailide, tabelite, jooniste või muul kujul.

## Aruanded R keeles

Lisaks käsulehele saab analüüsi vormistada ka terve aruandena. Rakenduses RStudio saab selleks kõik käsud ja sinna juurde kuuluvad selgitused vormistada lihttekstina vastavalt [Quarto](https://quarto.org/) eeskirjadele. Vastavaid `.qmd` faililaiendiga lihtteksti faile saab salvestada paljudes erinevates vormingutes, sh PDFi, HTMLi ja Microsoft Wordi dokumentidena. Teksti vormistamiseks tuleb sealjuures kasutada [Markdown](https://commonmark.org/help/) märgistuskeelt. 

<!---
Markdown
-->