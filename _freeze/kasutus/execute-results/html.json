{
  "hash": "d712d2d590ad54669c0e1147f2c0b906",
  "result": {
    "markdown": "# Põhikasutus {#sec-kasutus}\n\nKäesolevas peatükis tutvume lühidalt R keele kasutamisega.\n\n## Käsurida\n\nKäsureal (*command line*) esitatud käsu alusel teeb R rakendus vastavalt R keele loogikale arvutused ja esitab vastuse. Nii saab käsurida kasutada ka lihtsalt kalkulaatorina ja sealjuures saab korraga teha ka mitu tehet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n13 + 8 # Liitmine\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21\n```\n:::\n\n```{.r .cell-code}\n8 - 5 # Lahutamine \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n21 / 3 # Jagamine \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\n5 * 3 # Korrutamine \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n```{.r .cell-code}\n2^3 # Astendamine \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n9^(1/2) # Ruutjuur\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n13 + (8 - 5) * 9^(1/2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22\n```\n:::\n:::\n\n\nR keele võimekus avaldub aga siis, kui kasutame käske salvestamaks väärtused objektidesse ja rakendamaks neil erinevaid funktsioone.\n\nMõnikord väljastab R käsu sisestamisel veateate. Teatega \"Error\" kaasneb käsu täitmata jätmine, samas kui teade \"Warning\" tähendab, et käsk küll täideti, aga teatud tingimustel.\n\n## Objektid ja funktsioonid\n\n> To understand computations in R, two slogans are helpful:  \n> \tEverything that exists is an object.  \n> \tEverything that happens is a function call.  \n> - John Chambers\n\nAndmete töötlemiseks on vaja need kuidagi salvestada. Väärtusi saab R keeles salvestada objektidena. Sealjuures väärtused, mis ei ole arvud, tuleb ümbritseda jutumärkidega.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Objekti võib salvestada arve...\nkama <- 2\nkama\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# ...aga ka sõnu või lauseid.\npesa <- 'muna'\npesa\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"muna\"\n```\n:::\n\n```{.r .cell-code}\n# Trükitav nö nool ei tohi sisaldada tühikuid, \n# sest vastasel juhul käsitletakse käsku võrdlusena.\nkama < - 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nObjekte võib nimetada kuidas iganes^[Objektidele nime valimine võtab sageli rohkem aega kui peaks: \"There are only two hard things in Computer Science: cache invalidation and naming things.\"], aga nimetused peavad algama tähega ega tohi sisaldada teatud kirjavahemärke ega tühikuid.\n\nVäärtuste klasse on R keeles väga palju, aga olulisimaks võib pidada nendest kolme:\n\n- üksik väärtus on element,  \n- mitu väärtust on vektor, \n- tabelina vormistatud väärtused on andmetabel (*data frame*).\n\nVäärtuse klass sõltub sellest, mis kujul me andmed sisestame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Element\nkaks <- 3\nkaks\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# Vektor\nnimed <- c('Alar', 'Kaja', 'Jüri')\nnimed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Alar\" \"Kaja\" \"Jüri\"\n```\n:::\n\n```{.r .cell-code}\n# Andmetabel\nõpilased <- data.frame(nimi = nimed, \n                       hinne = c(5,4,2))\nõpilased\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  nimi hinne\n1 Alar     5\n2 Kaja     4\n3 Jüri     2\n```\n:::\n:::\n\n\nNagu näha, siis rohkem kui ühe elemendi esitamiseks peame kasutama vastavat funktsiooni.\n\nSamuti ilmneb, et funktsiooni nimetuse järele sulgudesse tuleb sisestada funktsiooni argumendid. Esimene argument on enamasti objekt ja järgnevad argumendid täpsustused.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFibonacci <- c(1,NA,2,3,NA)\n# Kuna vektor sisaldab teadmata väärtusi, \n# siis ei väljasta funktsioon vektori summat.\nsum(Fibonacci)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n# Saame täpsustada, et soovime summa arvutada ilma puuduvate väärtusteta.\nsum(Fibonacci, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nIga funktsiooni kõikide argumentide teada saamiseks saab kuvada vastava funktsiooni abilehe. Selleks tuleb sisestada käsk, milles funktsiooni nimetusele eelneb küsimärk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sum\n```\n:::\n\n\n:::{.callout-note}\nR keele kasutamine on põhimõtteliselt väga lihtne: see on lihtsalt funktsioonide rakendamine objektidel. Kogu keerukus seisneb objektide ja funktsioonide tundmises ning nende omavahel kombineerimises.\n:::\n\n## Laiendused\n\nR keele paigaldamisel tuleb kaasa palju funktsioone, mis võimaldavad rakendada põhilisi andmetöötluse ja statistilise analüüsi protseduure. Võimaluste lisamiseks on aga paljud R keele kasutajad kirjutanud ise funktsioone ja koondanud need laiendustesse või pakkidesse (*packages*), mis on saadaval ka teistele kasutajatele^[Ametlikult tunnustatud R keele laiendused on [CRAN](https://cran.r-project.org/) hoidlas.]. Selleks, et neid laiendusi kasutada tuleb need esmalt arvutisse paigaldada ja seejärel töölauale laadida.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Laadime laienduse alla ja paigaldame arvutisse.\ninstall.packages('tidyverse')\n# Laienduse kasutamiseks tuleb see esmalt R töölauale laadida.\nlibrary('tidyverse')\n```\n:::\n\n\n\n\nEelnevate käskudega paigaldatud ja laaditud laiendus `tidyverse` sisaldab tegelikult palju teisi laiendusi, mille funktsioonid lihtsustavad käskude kirjutamist R keeles. Edaspidi kasutame paljusid antud laienduses sisalduvaid funktsioone.\n\n## Sisestamine\n\nMõistagi ei pea andmed R töölauale sisestama üksikute väärtuste kaupa nii nagu eelnevas näites. Lisatavates lainedustes olevate funktsioonide abil on R võimeline lugema andmeid peaaegu misiganes vormingus. Siiski on soovitatav kasutada R keelega kaasas olevaid funktsioone, mis tunnevad eelkõige lihttekstina salvestatud andmeid. Üheks selliseks andmevorminguks on CSV (*comma separated value*), mis on lihtsalt teksti sisaldav fail, milles väärtused on eraldatud komadega.\n\nCSV vormingus andmete R töölauale laadimiseks saab kasutada funktsiooni `read.csv()`, mille argumendiks on andmefaili koht failisüsteemis. Kui andmete esimene rida sisaldab veergude nimetusi, siis tuleb seda argumendiga täpsustada argumendiga `header = TRUE`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loeme objekti \"thi\" töölaua kaustas olevast failist \"thi.csv\"\n# Need on tarbijahinnaindeksi (THI) andmed Statistikaameti tabeli IA02 alusel\nthi <- read.csv('C:/Users/kasutajanimi/Desktop/thi.csv', header = TRUE)\n```\n:::\n\n\n::: {.callout-caution}\nKui salvestada tabel CSV vormingus Microsoft Exceli abil, siis on väärtuse eraldajateks hoopis semikoolonid. Sellisel juhul loeb funktsioon `read.csv()` andmeid valesti. Lahenduseks on kasutada funktsiooni `read.csv2()` , mis arvestab väärtuste eraldajatena semikoolonit ja komakohtade eraldajatena komasid.\n\nCSV aluseks on USA standard, milles arvude komakohad eraldatakse punktiga. Kuna Euroopas eraldatakse arvudes komakohad komaga, siis ei saa komasid kasutada väärtuse eraldamiseks ja Excel eraldab väärtused hoopis semikoolonitega.\n:::\n\nFaililaiendiga `.xlsx` nö tabelarvutuse vihikutes ei pruugi andmed olla vormistatud korrektse andmetabelina ja võivad sisaldada tabelist väljaspool olevaid väärtusi. Nt tühjade ridade või veergudega tabelid ilmuvad statistikarakendustesse või R töölauale laadides sageli vigaselt. Selliste vigade kõrvaldamine on enamasti keerulisem võrreldes CSV vormingu kasutamisega. Sellepärast on ka soovitatav kasutada CSV vormingut. Kui on siiski vajadus laadida töölauale `.xlsx` vormingus olevad andmed, siis selleks saab kasutada funktsiooni `read_excel()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthi <- read_excel('C:/Users/kasutajanimi/Desktop/thi.xlsx')\n```\n:::\n\n\n::: {.callout-tip}\nKui andmed on mingi muu faililaiendiga (nt `.xlsx`), siis on soovitatav need esmalt CSVna salvestada ja alles seejärel R töölauale laadida. \n:::\n\nKui soovime kõik loetavad ja salvestatavad failid koondada ühte kausta, siis võime määrata selle vaikimisi kaustaks. Sel juhul ei pea me faili täielikku asukohta sisestama, vaid piisab faili nimest ja -laiendist.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd('C:/Users/kasutajanimi/Desktop/')\nthi <- read.csv('thi.csv')\n```\n:::\n\n\n::: {.callout-warning}\nR keel tunnistab failide asukoha kirjes kaustade eraldajatena paremale kaldu olevaid kaldkriipse (`/`). See vastab MacOS ja Linuxi failisüsteemile. Microsoft Windows kasutab aga vasakule kaldu olevaid kaldkriipse (`\\`). Seega tuleb Windowsi süsteemis faili asukoha kopeerimisel R keelde kaldkriipsud vastavalt ära muuta.\n:::\n\n## Ülevaade objektist\n\nAndmete sisestamisel on hea mõte veenduda, et andmed laaditi töölauale õigesti. Selleks saame kasutada funktsiooni `head()`, mis kuvab esimesed viis rida. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(thi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Aasta Kaubagrupp      Kuu Tarbijahinnaindeks\n1  1998      Kokku  Jaanuar             105.58\n2  1998      Kokku Veebruar             106.59\n3  1998      Kokku    Märts             107.43\n4  1998      Kokku   Aprill             107.90\n5  1998      Kokku      Mai             108.28\n6  1998      Kokku    Juuni             108.48\n```\n:::\n:::\n\n\nKõikidest andmetabeli tunnustest saame ülevaate funktsiooni `str()` abil. Samuti kuvab funktsioon vaatluste ja tunnuste arvu.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(thi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3991 obs. of  4 variables:\n $ Aasta             : chr  \"1998\" \"1998\" \"1998\" \"1998\" ...\n $ Kaubagrupp        : chr  \"Kokku\" \"Kokku\" \"Kokku\" \"Kokku\" ...\n $ Kuu               : chr  \"Jaanuar\" \"Veebruar\" \"Märts\" \"Aprill\" ...\n $ Tarbijahinnaindeks: num  106 107 107 108 108 ...\n```\n:::\n:::\n\n\n## Valimine\n\nTabelarvutuses saab vajalike lahtrite valimiseks kasutada kursorit, aga käsureal ei saa valikud vormistada muul viisil kui käsuna. Selleks kõige lihtsam viis on sisestada soovitud väärtuste asukoht objekti järel nurksulgudesse. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vektori kolmas väärtus\nFibonacci\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 NA  2  3 NA\n```\n:::\n\n```{.r .cell-code}\nFibonacci[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# Andmetabel esimese rea ja neljanda veeru väärtus\nthi[1, 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 105.58\n```\n:::\n\n```{.r .cell-code}\n# Andmetabeli veeru Tarbijahinnaindeks esimene rida\nthi$Tarbijahinnaindeks[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 105.58\n```\n:::\n\n```{.r .cell-code}\n# Andmetabel esimese rea ja kõikide veergude väärtused\nthi[1, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Aasta Kaubagrupp     Kuu Tarbijahinnaindeks\n1  1998      Kokku Jaanuar             105.58\n```\n:::\n:::\n\n\nEnamasti ei soovi me aga vajalikke väärtusi valida mitte nende asukoha alusel, vaid  mingi teise tunnuse väärtuse alusel. Sellisel juhul saame esitada valiku tõeväärtusena.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Kolmas ja neljas väärtus asukoha alusel\nFibonacci[c(3,4)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n\n```{.r .cell-code}\n# Kolmas ja neljas väärtus tõeväärtusena\nFibonacci[c(FALSE,FALSE,TRUE,TRUE,FALSE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n:::\n\n\nTõeväärtused võivad sisaldada ka mitut tingimust.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read, mille korral THI oli vähem kui 100 ja kaubagrupp ei olnud side\nthi[thi$Tarbijahinnaindeks < 100 & thi$Kaubagrupp != 'Side', ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Aasta                      Kaubagrupp       Kuu Tarbijahinnaindeks\n176  1999 Toit ja mittealkohoolsed joogid    August              99.40\n177  1999 Toit ja mittealkohoolsed joogid September              99.12\n178  1999 Toit ja mittealkohoolsed joogid  Oktoober              99.89\n```\n:::\n\n```{.r .cell-code}\n# Aasta ja THI väärtused jaanuarikuus kõikide kaupade arvestuses\nthi[thi$Kuu == 'Jaanuar' & thi$Kaubagrupp == 'Kokku', \n    c('Aasta', 'Tarbijahinnaindeks')]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Aasta Tarbijahinnaindeks\n1     1998             105.58\n157   1999             110.44\n313   2000             114.01\n469   2001             120.63\n625   2002             125.70\n781   2003             128.94\n937   2004             129.55\n1093  2005             135.03\n1249  2006             141.31\n1405  2007             148.54\n1561  2008             164.88\n1717  2009             171.58\n1873  2010             170.39\n2029  2011             179.34\n2185  2012             187.38\n2341  2013             193.84\n2497  2014             195.95\n2653  2015             193.40\n2809  2016             192.31\n2965  2017             197.58\n3121  2018             204.44\n3277  2019             209.98\n3433  2020             213.40\n3589  2021             213.88\n3745  2022             238.13\n3901  2023             282.40\n```\n:::\n:::\n\n\n::: {.callout-note}\nTõeväärtuse abil saame objektist valida väärtused mingi teise objekti väärtuse alusel. Selle teise objekti väärtused tuleb määrata võrdlusoperaatori abil. Mitme võrdluse korral peame võrdlused eraldama loogikaoperaatoritega.\n:::\n\nVõrdlusoperaatorite (*relational operators*) abil saame tekitada tõeväärtuse, mille alusel saame valida soovitud väärtuse mingi muu objekti väärtuse järgi. Võrdlusoperaatoreid on kuus:\n\n- võrdub `==` (kaks võrdusmärki), \n- ei võrdu `!=`, \n- suurem kui `>`, \n- väiksem kui `<`, \n- suurem või võrdne kui `>=`, \n- väiksem või võrdne kui `<=`.\n\nLoogikaoperaatorite (*logical operators*) abil saame ühendada mitu võrdlust. Lihtsamaid loogikaoperaatoreid on kolm (`!`, `&`, `|`) ja neid saab kasutada võrdluste liitmisel tõeväärtuste moodustamiseks nt järgnevalt:\n\n- mitte x (`!x`)\n- x ja y (`x & y`), \n- x või y (`x | y`), \n- x ja mitte y (`x & !y`).\n\n### Valimine andmetabelist\n\nEelneva kirjelduse alusel võib väärtuste valimine tunduda keeruline ja tülikas. Seda saab teatud mõttes lihtsustada, kui kasutame varem paigaldatud laienduses sisalduvaid funktsioone. Ridade valimiseks on funktsioon `filter()` ja veergude valimiseks `select()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# THI aastal 2020\nfilter(thi, Aasta == 2020 & Kaubagrupp == 'Kokku')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Aasta Kaubagrupp       Kuu Tarbijahinnaindeks\n1   2020      Kokku   Jaanuar             213.40\n2   2020      Kokku  Veebruar             214.45\n3   2020      Kokku     Märts             212.94\n4   2020      Kokku    Aprill             212.09\n5   2020      Kokku       Mai             210.67\n6   2020      Kokku     Juuni             212.57\n7   2020      Kokku     Juuli             212.57\n8   2020      Kokku    August             213.94\n9   2020      Kokku September             213.32\n10  2020      Kokku  Oktoober             212.24\n11  2020      Kokku  November             212.49\n12  2020      Kokku Detsember             212.50\n```\n:::\n\n```{.r .cell-code}\n# THI veerg andmetabeli esimesel viiel real\nselect(head(thi), Tarbijahinnaindeks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Tarbijahinnaindeks\n1             105.58\n2             106.59\n3             107.43\n4             107.90\n5             108.28\n6             108.48\n```\n:::\n:::\n\n\nTehtud valiku salvestamiseks tuleb saadud tulemus lihtsalt sisestusoperaatori abil objekti salvestada.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Jätame alles vaid read alates aastast 2020\nthi <- filter(thi, Aasta >= 2020)\n```\n:::\n\n\n## Kokkuvõtted\n\nVäärtuste kokku võtvaks kirjeldamiseks on väga palju viise ja neile vastavaid funktsioone, aga alustuseks vaatame liitmist, keskmist ja äärmuslikke väärtusi.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nFibonacci <- c(0,1,1,2,3,5,8,13,21,34,55,89)\nsum(Fibonacci) # Summa\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 232\n```\n:::\n\n```{.r .cell-code}\nmean(Fibonacci) # Aritmeetiline keskmine\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19.33333\n```\n:::\n\n```{.r .cell-code}\nmedian(Fibonacci) # Mediaan\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.5\n```\n:::\n\n```{.r .cell-code}\nmin(Fibonacci) # Väikseim väärtus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nmax(Fibonacci) # Suurim väärtus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89\n```\n:::\n\n```{.r .cell-code}\nrange(Fibonacci) # Väikseima ja suurima väärtuse vahe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0 89\n```\n:::\n\n```{.r .cell-code}\nlength(Fibonacci) # Väärtuste arv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\n\n## Torutamine\n\nKoodi kirjutamise ja eriti hiljem lugemise lihtsustamiseks saab kasutada paljudes programmeerimiskeeltes kasutusel olevat toru (*pipe*). Torude abil saame ühe funktsiooni tulemuse suunata järgmisesse funktsiooni, mis muudab koodi selgemaks. Kokku on kolm viisi, kuidas funktsioone omavahel ühendada.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Oletame, et soovime uurida eluaseme THI muutust 2022. aastal\n## Iga iga funktsiooni tulemuse saab järjest objekti salvestada\neluase <- filter(thi, Kaubagrupp == 'Eluase')\neluase <- filter(eluase, Aasta == 2022)\nselect(eluase, Kuu, Tarbijahinnaindeks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Kuu Tarbijahinnaindeks\n1    Jaanuar             452.08\n2   Veebruar             439.13\n3      Märts             456.10\n4     Aprill             538.55\n5        Mai             557.34\n6      Juuni             587.38\n7      Juuli             623.25\n8     August             683.04\n9  September             659.76\n10  Oktoober             585.75\n11  November             592.23\n12 Detsember             589.07\n```\n:::\n\n```{.r .cell-code}\n## Nö pesastamist kasutades tõstame funktsiooni tulemuse järgmise funktsiooni sisse\nselect(filter(filter(thi, Kaubagrupp == 'Eluase'), Aasta == 2022), Kuu, Tarbijahinnaindeks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Kuu Tarbijahinnaindeks\n1    Jaanuar             452.08\n2   Veebruar             439.13\n3      Märts             456.10\n4     Aprill             538.55\n5        Mai             557.34\n6      Juuni             587.38\n7      Juuli             623.25\n8     August             683.04\n9  September             659.76\n10  Oktoober             585.75\n11  November             592.23\n12 Detsember             589.07\n```\n:::\n\n```{.r .cell-code}\n## Torutamise käigus saadame funktsiooni tulemuse järgmisesse funktsiooni\nthi %>% \n  filter(Kaubagrupp == 'Eluase') %>% \n  filter(Aasta == 2022) %>% \n  select(Kuu, Tarbijahinnaindeks)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Kuu Tarbijahinnaindeks\n1    Jaanuar             452.08\n2   Veebruar             439.13\n3      Märts             456.10\n4     Aprill             538.55\n5        Mai             557.34\n6      Juuni             587.38\n7      Juuli             623.25\n8     August             683.04\n9  September             659.76\n10  Oktoober             585.75\n11  November             592.23\n12 Detsember             589.07\n```\n:::\n:::\n\n\nNagu näha, siis arvestab torule järgnev funktsioon kõige esimese argumendina eelneva funktsiooni tulemust.\n\nÜhendades nüüd oskused andmetabelist andmeid valida ja kokku võtta saame juba hakata vastama mitmesugustele küsimustele.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Millal ja mis kaubagrupis oli THI pärast 2020. aastat kõige kõrgem?\nfilter(thi, Aasta >= 2021) %>% \n  filter(Tarbijahinnaindeks == max(Tarbijahinnaindeks))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Aasta Kaubagrupp    Kuu Tarbijahinnaindeks\n1  2022     Eluase August             683.04\n```\n:::\n\n```{.r .cell-code}\n# Mis juhtudel on THI suurenenud 1997. aastaga võrreldes vähemalt 4 korda?\nthi %>% filter(Tarbijahinnaindeks > 400) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Aasta                       Kaubagrupp       Kuu Tarbijahinnaindeks\n1   2021                           Eluase September             400.24\n2   2021                           Eluase  November             405.27\n3   2021                           Eluase Detsember             484.44\n4   2022                           Eluase   Jaanuar             452.08\n5   2022                           Eluase  Veebruar             439.13\n6   2022                           Eluase     Märts             456.10\n7   2022                           Eluase    Aprill             538.55\n8   2022                           Eluase       Mai             557.34\n9   2022                           Eluase     Juuni             587.38\n10  2022                           Eluase     Juuli             623.25\n11  2022                           Eluase    August             683.04\n12  2022                           Eluase September             659.76\n13  2022                           Eluase  Oktoober             585.75\n14  2022                           Eluase  November             592.23\n15  2022                           Eluase Detsember             589.07\n16  2022 Söömine väljaspool kodu, majutus     Juuli             426.74\n17  2022 Söömine väljaspool kodu, majutus    August             416.38\n18  2023                           Eluase   Jaanuar             594.75\n19  2023                           Eluase  Veebruar             581.33\n20  2023                           Eluase     Märts             581.58\n21  2023                           Eluase    Aprill             627.92\n22  2023                           Eluase       Mai             626.18\n23  2023                           Eluase     Juuni             628.28\n24  2023                           Eluase     Juuli             614.56\n25  2023 Söömine väljaspool kodu, majutus  Veebruar             404.10\n26  2023 Söömine väljaspool kodu, majutus     Märts             410.81\n27  2023 Söömine väljaspool kodu, majutus    Aprill             409.45\n28  2023 Söömine väljaspool kodu, majutus       Mai             415.23\n29  2023 Söömine väljaspool kodu, majutus     Juuni             434.64\n30  2023 Söömine väljaspool kodu, majutus     Juuli             441.37\n```\n:::\n:::\n\n\n## Salvestamine\n\nNii nagu andmete R keskkonda lugemise korral on ka nende salvestamiseks soovitatav kasutada CSV vormingut. Selleks on funktsioon `write.csv()`, aga kui soovime hiljem selle faili avada Excelis, siis tuleb enamasti kasutada funktsiooni `write.csv2()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(thi, 'andmed/thi.csv')\n```\n:::\n\n\n## Korratav analüüs\n\nKuna R keele kasutamisel teeme kõik tehted käskude alusel, siis saame kõik käsud salvestada käsulehele (*script*). Käsulehe kasutamine annab palju võimalusi: \n\n- kui soovime sisestatud käsu tühistada, siis saame jooksutada uuesti eelnevad käsud;\n- kui avastame hiljem, et tegime vea või soovime midagi tehtud analüüsis muuta, siis piisab käsulehel muudatuse tegemisest ja käsulehe uuesti jooksutamisest; \n- saame hiljem üle vaadata, kuidas täpselt andmetöötluses mingi tulemuseni jõudsime; \n- teised saavad veenduda meie tulemuste õigsuses, rakendades meie koosatud käsulehte mingitel andmetel.\n\n::: {.callout-note}\nR keelt kasutades ei ole võimalik käske tühistada või tagasi võtta (*undo*). Kõik muudatused andmetes on lõplikud. Eelneva analüüsi sammu juurde tagasi minemiseks peame andmed uuesti R töölauale sisestama. \n:::\n\nKäsulehel on andmetöötluse tegevused enamasti teatud järjekorras:\n\n1. töökausta määramine, \n2. laienduste laadimine, \n3. andmete sisestamine, \n4. andmetöötlus, \n5. tulemuse salvestamine andmefailide, tabelite, jooniste või muul kujul.\n\n## Aruanded R keeles\n\nLisaks käsulehele saab analüüsi vormistada ka terve aruandena. Rakenduses RStudio saab selleks kõik käsud ja sinna juurde kuuluvad selgitused vormistada lihttekstina vastavalt [Quarto](https://quarto.org/) eeskirjadele. Vastavaid `.qmd` faililaiendiga lihtteksti faile saab salvestada paljudes erinevates vormingutes, sh PDFi, HTMLi ja Microsoft Wordi dokumentidena. Teksti vormistamiseks tuleb sealjuures kasutada [Markdown](https://commonmark.org/help/) märgistuskeelt. \n\n<!---\nMarkdown\n-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}