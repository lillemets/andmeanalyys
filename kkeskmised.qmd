# K-keskmised {#sec-kkeskmised}

Klasterdamist võib mõista muuhulgas ka objektide kogumi mitmeks osaks tükeldamisena. See lähenemine ongi aluseks K-keskmiste klasterdamisele. Selle käigus jaotatakse tunnuste ruum osadeks nii mitu korda, kui on vaja, et iga objekt oleks võimalikult lähedal ühele klastri keskpunktile. See keskpunkt on **klastrikeskmine** (*centroid*) ning klastrikeskmiste  ja seega ka soovitud klastrtite arv $K$ tuleb määrata enne klasterdamist. 

Selle klasterdamise eesmärk on jaotada objektid $x_i$ klastritesse arvul $K$ nii, et kaugused iga objekti ja samasse klastrisse kuuluvate objektide keskpunkti vahel oleksid võimalikult väikesed. Selleks määratakse iga objekt lähima klastrikeskmise alusel ühte klastrisse ja seejärel arvutatakse igasse klastrisse kuuluvate objektide keskpunktid $\bar x_1, ... \bar x_K$. Kõige sobivamad klastrikeskmised saadakse korduvalt minimeerides funktsiooni
$$ESS = \sum^K_{k = 1} \sum_{c(i)=k} (x_i - \bar x_k)^T(x_i - \bar x_k),$$
kus $c(i)$ on objekti $x_i$ sisaldav klaster. 

:::{.callout-important}
**K-keskmiste klasterdamist** (*k-means clustering*) kasutades jaotatakse objektide kogum korduvalt osadeks, liigutades igal korral eelnevalt määratud arvul klastrikeskmisi. Klastrikeskmisi liigutatakse selliselt, et kõikde objektide kauguste summa nende lähimast klastrikeskmisest oleks võimalikult väike.
:::

Võrreldes mõne muu klasterdamise meetodiga k-keskmiste klasterdamine

+ saab hakkama ka suure arvu objektide klastritesse jagamisega, 
+ on põhimõtteliselt kasutatav prognoosimiseks, sest iga vaatluse jaoks sobivama klastri määrab lähim klastrikeskmine, 
- vajab, et klastrite arv oleks ette antud, 
- võib korduval rakendamisel anda erinevad klastrid, 
- eeldab, et objektide jaotus tunnuste ruumis klastrikeskmiste ümber on enam-vähem ringikujuline ja klastrid on sarnase läbimõõduga.

Protsess kõige sobivamate klastrikeskmiste leidmiseks hõlmab järgnevaid samme.

1. Arvutatakse kauguste maatriks, milles on kaugused objektide ja (esimesel kordusel enamasti juhuslikult määratud) $K$ klastrikeskmise vahel. 
2. Iga objekt määratakse sellesse klastrisse, mille klastrikeskmisele see kõige lähemal on. 
3. Vastavalt tekkinud uutele klastritele arvutatakse uued klastrikeskmised. 
4. Eelnevaid samme korratakse senikaua, kuni iga objekt asub klastris, mille keskmisele see kõige lähemal on. 

## Klastrite leidmine

Alljärgnevas klasterdamise näites kasutame enne 1983. aastat tootmises olnud autode mudelite andmeid. Üritame jaotada autod klastritesse mitmesuguseid mõõtmeid ja teisi suurusi iseloomustavate tunnuste alusel. Sisestame klasterdamiseks kasutatavad arvtunnused lihtsuse huvides eraldi objekti.

```{r}
library('magrittr')
autod <- read.csv('andmed/vehicles1983.csv')
str(autod)
autotunnused <- autod[, 1:7]
```

Arvtunnused mõõdavad erinevaid nähtusi ja on nii ka väga erinevatel skaaladel. Seetõttu on vajalik need väärtused enne igasuguste kauguste mõõtmist tunnuste ruumis ühtlasele skaalale viia. Samuti ei saa me mõõta kaugusi, kui mõnede vaatluste asukoht tunnuste ruumis on teadmata. Seega tuleb sellised vaatlused välja arvata.

```{r}
head(autotunnused)
autotunnused %<>% scale %>% na.omit
head(autotunnused) %>% round
```

Seoseid arvtunnuste vahel saame ilmestada paariviisiliste hajuvusjoonistega.

```{r}
pairs(autotunnused, pch = 20, cex = .2, oma = c(2,2,2,2))
```

Kuigi tunnuste paariviisilisel uurimisel ei ilmne klastreid, võivad need siiski olla peidus mitme tunnuse hajuvuses. Paljude tunnuste hajuvust saame enamasti suurel määral ilmestada kahe peakomponendiga.

``` {r}
peakomponendid <- prcomp(autotunnused)
plot(peakomponendid$x[, 1:2], pch = 20)
```

Saame jooniselt eristada vähemalt kolm punktikogumikku. Seega võiks nende tunnuste alusel autod jaotada kolmeks sisemiselt sarnaseks rühmaks. R keeles saame k-kesmiste alusel klastrid arvutada funktsiooniga `kmeans()`, mille argumendi `centers` väärtuseks peame sisestama soovitud klastrite arvu (või iga soovitud klastri algsed keskpunktid). Leiame alustuseks kolm klastrit. 

```{r}
kkesk <- kmeans(autotunnused, centers = 3)
kkesk
```

Funktsioon väljastab mitmesuguseid parameetreid klasterdamise protsessi ja tulemuste kohta. Igale vaatlusele saame määrata andmetabelisse klastri, kasutades funktsiooni `kmeans()` tulemuse osist `cluster`. Nt kuna sisestasime eelnevalt klasterdamise tulemuse objekti `kkesk`, siis saame iga vaatluse klastri kätte käsuga `kkesk$cluster`.

```{r}
autod$klaster <- kkesk$cluster
head(autod)
```

:::{.callout-warning}
Funktsioon `kmeans()` määrab klastri numbri juhuslikult, mistõttu võib samal klastril olla igal järgmisel klastrite leidmisel erinev number. 
:::

## Klastrite arv

Kuna k-keskmiste korral leitakse sobivamad klastrid vaatluste kogumi korduva tükeldamise teel, siis ei ole selle tulemuseks klastrite hierarhiat, mida saaks kujutada puujoonisel. Nii ei saa kasutada puujoonist ka klastrite valimiseks.

Kõige sobivama klastrite arvu määramiseks saame aga kasutada nn **Gap mõõdikut** (*Gap statistic*). Selle mõõdiku väärtus iseloomustab, kui palju väiksemad on klastrisisesed kaugused teatud klastrite arvu korral olemasolevate andmete korral võrreldes ühtlase jaotusega andmetega. Kui klastrite lisamine annab väiksemad klastrisisesed kaugused, siis peaksime kasutama rohkem klastreid ja vastupidi. Sealjuures peame arvesse võtma ka mõõdiku usaldusvahemikke ja valima suurema klastrite arvu ainult juhul, kui mõõdiku vastavad usaldusvahemikud ei kattu mõõdiku usaldusvahemikega väiksema arvu klastrite korral. 

Saame seda näitlikustada joonisega, mille saab tekitada funktsiooniga `clusGap` laiendusest `cluster` alljärgnevalt. Et teada saada klasterdamise tulemus erinevate klastrite arvuga, tuleb klasterdamist korrata ja selleks tekitame funktsiooni nimega `kmFun()`.

```{r}
library('cluster')
kmFun <- function(x, k) kmeans(x, k, nstart = 10)
kmG <- clusGap(autotunnused, kmFun, K.max = 10)
plot(kmG)
```

Antud joonisel on kujutatud, kui ühtsed klastrid me erineval arvul klastrite leidmisel saame. Peame joonise abil välja selgitama, millise klastrite arvu juures nende lisamine enam ühtsemaid klastreid ei anna. Näeme, et viie klastri kasutamine ei anna väiksemaid klastrisiseseid kaugusi kui nelja klastri korral. Seega on nende andmete klasterdamiseks sobilik kasutada hoopis nelja klastrit. 

```{r}
kkesk <- kmeans(autotunnused, centers = 4)
autod$klaster <- kkesk$cluster
```

## Klastrite esitamine

Klastrite hierarhia asemel kujutatakse k-keskmiste alusel moodustunud klastreid enamasti hajuvusjoonisel, kus telgedel on kaks tunnuste peakomponenti ja klastrid on kujutatud erinevate värvidega. 

```{r}
plot(peakomponendid$x[, 1:2], pch = 20, col = autod$klaster)
```

Näeme, et esitatud kahe mõõtme alusel suutis algoritm üsna usutavalt vaatlused klastritesse jagada.

Vaatluse klastri määrab k-keskmise meetodi korral kõige lähem klastri keskpunkt, mis selgus korduva vaatluste jaotamis tulemusel nagu eelnevalt kirjeldatud. Funktsiooni `kmeans()` poolt väljastatud teabe seas on ka need klasterdamiseks kasutatud tunnuste keskmised saadud klastrite lõikes. 

```{r}
kkesk$centers
```

Need tunnuste keskmised väärtused klastrite lõikes toovad enamasti ilmekalt esile klastrite eripärad.

Klastritele iseloomustamiseks on veel võimalusi esitatud peatükis @sec-klasterdamine.